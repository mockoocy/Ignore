# Generated from src/grammar/ignoreLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,401,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
        7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
        2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,
        7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,
        2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,
        7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,
        2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,
        7,45,2,46,7,46,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,179,8,12,10,12,12,12,182,
        9,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,5,13,193,8,13,
        10,13,12,13,196,9,13,1,13,1,13,1,14,1,14,5,14,202,8,14,10,14,12,
        14,205,9,14,1,14,3,14,208,8,14,1,15,4,15,211,8,15,11,15,12,15,212,
        1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,28,4,28,295,8,28,11,28,12,28,296,1,28,1,28,1,29,1,29,1,30,
        1,30,5,30,305,8,30,10,30,12,30,308,9,30,1,30,1,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,
        327,8,34,1,35,4,35,330,8,35,11,35,12,35,331,1,36,4,36,335,8,36,11,
        36,12,36,336,1,36,1,36,5,36,341,8,36,10,36,12,36,344,9,36,1,37,1,
        37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,3,42,365,8,42,1,43,1,43,1,43,1,43,3,43,371,
        8,43,1,44,1,44,1,44,1,44,5,44,377,8,44,10,44,12,44,380,9,44,1,44,
        1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,
        395,8,46,10,46,12,46,398,9,46,1,46,1,46,3,180,306,378,0,47,2,0,4,
        1,6,2,8,3,10,4,12,5,14,6,16,7,18,8,20,9,22,10,24,11,26,12,28,13,
        30,0,32,14,34,15,36,16,38,17,40,18,42,19,44,20,46,21,48,22,50,23,
        52,24,54,25,56,26,58,27,60,28,62,29,64,30,66,31,68,32,70,33,72,34,
        74,35,76,36,78,37,80,38,82,39,84,40,86,41,88,42,90,43,92,44,94,45,
        2,0,1,7,1,0,48,57,2,0,10,10,13,13,2,0,65,90,97,122,4,0,48,57,65,
        90,95,95,97,122,82,0,32,32,8986,8987,9193,9196,9200,9200,9203,9203,
        9725,9726,9748,9749,9800,9811,9855,9855,9875,9875,9889,9889,9898,
        9899,9917,9918,9924,9925,9934,9934,9940,9940,9962,9962,9970,9971,
        9973,9973,9978,9978,9981,9981,9989,9989,9994,9995,10024,10024,10060,
        10060,10062,10062,10067,10069,10071,10071,10133,10135,10160,10160,
        10175,10175,11035,11036,11088,11088,11093,11093,126980,126980,127183,
        127183,127374,127374,127377,127386,127462,127487,127489,127489,127514,
        127514,127535,127535,127538,127542,127544,127546,127568,127569,127744,
        127776,127789,127797,127799,127868,127870,127891,127904,127946,127951,
        127955,127968,127984,127988,127988,127992,128062,128064,128064,128066,
        128252,128255,128317,128331,128334,128336,128359,128378,128378,128405,
        128406,128420,128420,128507,128591,128640,128709,128716,128716,128720,
        128722,128725,128727,128732,128735,128747,128748,128756,128764,128992,
        129003,129008,129008,129292,129338,129340,129349,129351,129535,129648,
        129660,129664,129672,129680,129725,129727,129733,129742,129755,129760,
        129768,129776,129784,3,0,9,10,13,13,32,32,2,0,60,60,62,62,415,0,
        4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,
        1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,
        1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,
        1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,
        1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,
        1,0,0,0,1,58,1,0,0,0,1,60,1,0,0,0,1,62,1,0,0,0,1,64,1,0,0,0,1,66,
        1,0,0,0,1,68,1,0,0,0,1,70,1,0,0,0,1,72,1,0,0,0,1,74,1,0,0,0,1,76,
        1,0,0,0,1,78,1,0,0,0,1,80,1,0,0,0,1,82,1,0,0,0,1,84,1,0,0,0,1,86,
        1,0,0,0,1,88,1,0,0,0,1,90,1,0,0,0,1,92,1,0,0,0,1,94,1,0,0,0,2,96,
        1,0,0,0,4,98,1,0,0,0,6,108,1,0,0,0,8,120,1,0,0,0,10,124,1,0,0,0,
        12,130,1,0,0,0,14,138,1,0,0,0,16,144,1,0,0,0,18,151,1,0,0,0,20,159,
        1,0,0,0,22,164,1,0,0,0,24,171,1,0,0,0,26,174,1,0,0,0,28,188,1,0,
        0,0,30,207,1,0,0,0,32,210,1,0,0,0,34,216,1,0,0,0,36,226,1,0,0,0,
        38,237,1,0,0,0,40,242,1,0,0,0,42,245,1,0,0,0,44,247,1,0,0,0,46,255,
        1,0,0,0,48,269,1,0,0,0,50,273,1,0,0,0,52,284,1,0,0,0,54,286,1,0,
        0,0,56,289,1,0,0,0,58,294,1,0,0,0,60,300,1,0,0,0,62,302,1,0,0,0,
        64,311,1,0,0,0,66,313,1,0,0,0,68,315,1,0,0,0,70,326,1,0,0,0,72,329,
        1,0,0,0,74,334,1,0,0,0,76,345,1,0,0,0,78,347,1,0,0,0,80,349,1,0,
        0,0,82,351,1,0,0,0,84,353,1,0,0,0,86,364,1,0,0,0,88,370,1,0,0,0,
        90,372,1,0,0,0,92,386,1,0,0,0,94,390,1,0,0,0,96,97,7,0,0,0,97,3,
        1,0,0,0,98,99,5,60,0,0,99,100,5,102,0,0,100,101,5,117,0,0,101,102,
        5,110,0,0,102,103,5,99,0,0,103,104,5,116,0,0,104,105,5,105,0,0,105,
        106,5,111,0,0,106,107,5,110,0,0,107,5,1,0,0,0,108,109,5,60,0,0,109,
        110,5,47,0,0,110,111,5,102,0,0,111,112,5,117,0,0,112,113,5,110,0,
        0,113,114,5,99,0,0,114,115,5,116,0,0,115,116,5,105,0,0,116,117,5,
        111,0,0,117,118,5,110,0,0,118,119,5,62,0,0,119,7,1,0,0,0,120,121,
        5,60,0,0,121,122,5,105,0,0,122,123,5,102,0,0,123,9,1,0,0,0,124,125,
        5,60,0,0,125,126,5,47,0,0,126,127,5,105,0,0,127,128,5,102,0,0,128,
        129,5,62,0,0,129,11,1,0,0,0,130,131,5,60,0,0,131,132,5,47,0,0,132,
        133,5,101,0,0,133,134,5,108,0,0,134,135,5,105,0,0,135,136,5,102,
        0,0,136,137,5,62,0,0,137,13,1,0,0,0,138,139,5,60,0,0,139,140,5,101,
        0,0,140,141,5,108,0,0,141,142,5,105,0,0,142,143,5,102,0,0,143,15,
        1,0,0,0,144,145,5,60,0,0,145,146,5,101,0,0,146,147,5,108,0,0,147,
        148,5,115,0,0,148,149,5,101,0,0,149,150,5,62,0,0,150,17,1,0,0,0,
        151,152,5,60,0,0,152,153,5,47,0,0,153,154,5,101,0,0,154,155,5,108,
        0,0,155,156,5,115,0,0,156,157,5,101,0,0,157,158,5,62,0,0,158,19,
        1,0,0,0,159,160,5,60,0,0,160,161,5,118,0,0,161,162,5,97,0,0,162,
        163,5,114,0,0,163,21,1,0,0,0,164,165,5,60,0,0,165,166,5,47,0,0,166,
        167,5,118,0,0,167,168,5,97,0,0,168,169,5,114,0,0,169,170,5,62,0,
        0,170,23,1,0,0,0,171,172,3,20,9,0,172,173,3,30,14,0,173,25,1,0,0,
        0,174,175,5,47,0,0,175,176,5,42,0,0,176,180,1,0,0,0,177,179,9,0,
        0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,181,1,0,0,0,180,178,1,0,
        0,0,181,183,1,0,0,0,182,180,1,0,0,0,183,184,5,42,0,0,184,185,5,47,
        0,0,185,186,1,0,0,0,186,187,6,12,0,0,187,27,1,0,0,0,188,189,5,47,
        0,0,189,190,5,47,0,0,190,194,1,0,0,0,191,193,8,1,0,0,192,191,1,0,
        0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,1,0,
        0,0,196,194,1,0,0,0,197,198,6,13,0,0,198,29,1,0,0,0,199,203,7,2,
        0,0,200,202,7,3,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,
        0,0,203,204,1,0,0,0,204,208,1,0,0,0,205,203,1,0,0,0,206,208,7,4,
        0,0,207,199,1,0,0,0,207,206,1,0,0,0,208,31,1,0,0,0,209,211,7,5,0,
        0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,
        0,213,214,1,0,0,0,214,215,6,15,0,0,215,33,1,0,0,0,216,217,5,60,0,
        0,217,218,5,112,0,0,218,219,5,114,0,0,219,220,5,111,0,0,220,221,
        5,103,0,0,221,222,5,114,0,0,222,223,5,97,0,0,223,224,5,109,0,0,224,
        225,5,62,0,0,225,35,1,0,0,0,226,227,5,60,0,0,227,228,5,47,0,0,228,
        229,5,112,0,0,229,230,5,114,0,0,230,231,5,111,0,0,231,232,5,103,
        0,0,232,233,5,114,0,0,233,234,5,97,0,0,234,235,5,109,0,0,235,236,
        5,62,0,0,236,37,1,0,0,0,237,238,5,60,0,0,238,239,5,47,0,0,239,240,
        1,0,0,0,240,241,3,30,14,0,241,39,1,0,0,0,242,243,5,60,0,0,243,244,
        3,30,14,0,244,41,1,0,0,0,245,246,3,30,14,0,246,43,1,0,0,0,247,248,
        5,110,0,0,248,249,5,97,0,0,249,250,5,109,0,0,250,251,5,101,0,0,251,
        252,5,61,0,0,252,253,1,0,0,0,253,254,3,30,14,0,254,45,1,0,0,0,255,
        256,5,114,0,0,256,257,5,101,0,0,257,258,5,116,0,0,258,259,5,117,
        0,0,259,260,5,114,0,0,260,261,5,110,0,0,261,262,5,84,0,0,262,263,
        5,121,0,0,263,264,5,112,0,0,264,265,5,101,0,0,265,266,5,61,0,0,266,
        267,1,0,0,0,267,268,3,30,14,0,268,47,1,0,0,0,269,270,3,30,14,0,270,
        271,5,58,0,0,271,272,3,30,14,0,272,49,1,0,0,0,273,274,5,99,0,0,274,
        275,5,111,0,0,275,276,5,110,0,0,276,277,5,100,0,0,277,278,5,105,
        0,0,278,279,5,116,0,0,279,280,5,105,0,0,280,281,5,111,0,0,281,282,
        5,110,0,0,282,283,5,61,0,0,283,51,1,0,0,0,284,285,5,62,0,0,285,53,
        1,0,0,0,286,287,3,30,14,0,287,288,5,61,0,0,288,55,1,0,0,0,289,290,
        5,123,0,0,290,291,1,0,0,0,291,292,6,27,1,0,292,57,1,0,0,0,293,295,
        7,5,0,0,294,293,1,0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,
        1,0,0,0,297,298,1,0,0,0,298,299,6,28,0,0,299,59,1,0,0,0,300,301,
        3,30,14,0,301,61,1,0,0,0,302,306,5,34,0,0,303,305,9,0,0,0,304,303,
        1,0,0,0,305,308,1,0,0,0,306,307,1,0,0,0,306,304,1,0,0,0,307,309,
        1,0,0,0,308,306,1,0,0,0,309,310,5,34,0,0,310,63,1,0,0,0,311,312,
        5,58,0,0,312,65,1,0,0,0,313,314,5,40,0,0,314,67,1,0,0,0,315,316,
        5,41,0,0,316,69,1,0,0,0,317,318,5,102,0,0,318,319,5,97,0,0,319,320,
        5,108,0,0,320,321,5,115,0,0,321,327,5,101,0,0,322,323,5,116,0,0,
        323,324,5,114,0,0,324,325,5,117,0,0,325,327,5,101,0,0,326,317,1,
        0,0,0,326,322,1,0,0,0,327,71,1,0,0,0,328,330,3,2,0,0,329,328,1,0,
        0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,73,1,0,0,
        0,333,335,3,2,0,0,334,333,1,0,0,0,335,336,1,0,0,0,336,334,1,0,0,
        0,336,337,1,0,0,0,337,338,1,0,0,0,338,342,5,46,0,0,339,341,3,2,0,
        0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,
        0,343,75,1,0,0,0,344,342,1,0,0,0,345,346,5,61,0,0,346,77,1,0,0,0,
        347,348,5,42,0,0,348,79,1,0,0,0,349,350,5,47,0,0,350,81,1,0,0,0,
        351,352,5,43,0,0,352,83,1,0,0,0,353,354,5,45,0,0,354,85,1,0,0,0,
        355,356,5,61,0,0,356,365,5,61,0,0,357,358,5,33,0,0,358,365,5,61,
        0,0,359,360,5,62,0,0,360,365,5,61,0,0,361,365,7,6,0,0,362,363,5,
        60,0,0,363,365,5,61,0,0,364,355,1,0,0,0,364,357,1,0,0,0,364,359,
        1,0,0,0,364,361,1,0,0,0,364,362,1,0,0,0,365,87,1,0,0,0,366,367,5,
        38,0,0,367,371,5,38,0,0,368,369,5,124,0,0,369,371,5,124,0,0,370,
        366,1,0,0,0,370,368,1,0,0,0,371,89,1,0,0,0,372,373,5,47,0,0,373,
        374,5,42,0,0,374,378,1,0,0,0,375,377,9,0,0,0,376,375,1,0,0,0,377,
        380,1,0,0,0,378,379,1,0,0,0,378,376,1,0,0,0,379,381,1,0,0,0,380,
        378,1,0,0,0,381,382,5,42,0,0,382,383,5,47,0,0,383,384,1,0,0,0,384,
        385,6,44,0,0,385,91,1,0,0,0,386,387,5,125,0,0,387,388,1,0,0,0,388,
        389,6,45,2,0,389,93,1,0,0,0,390,391,5,47,0,0,391,392,5,47,0,0,392,
        396,1,0,0,0,393,395,8,1,0,0,394,393,1,0,0,0,395,398,1,0,0,0,396,
        394,1,0,0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,396,1,0,0,0,399,
        400,6,46,0,0,400,95,1,0,0,0,17,0,1,180,194,203,207,212,296,306,326,
        331,336,342,364,370,378,396,3,6,0,0,5,1,0,5,0,0
    ]

class ignoreLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    expr = 1

    FUNCTION_TAG_OPEN = 1
    FUNCTION_TAG_END = 2
    IF_TAG = 3
    IF_END = 4
    ELIF_END = 5
    ELIF_TAG = 6
    ELSE = 7
    ELSE_END = 8
    VAR_DECL_START = 9
    VAR_DECL_END = 10
    VAR_DECL = 11
    COMMENT = 12
    LINE_COMMENT = 13
    WS = 14
    OPEN_PROGRAM = 15
    CLOSE_PROGRAM = 16
    CLOSE_TAG = 17
    OPEN_TAG = 18
    TAG_REFERENCE = 19
    FUNCTION_NAME = 20
    FUNCTION_RET_TYPE = 21
    FUNCTION_PARAM = 22
    CONDITION_EQ = 23
    END_TAG = 24
    PROPERTY_NAME = 25
    OPEN_CURLY = 26
    EXPR_WS = 27
    NAME = 28
    LITERAL_STRING = 29
    COLON = 30
    OPEN_PAREN = 31
    CLOSE_PAREN = 32
    LITERAL_BOOL = 33
    LITERAL_INT = 34
    LITERAL_FLOAT = 35
    EQUALS = 36
    MUL = 37
    DIV = 38
    ADD = 39
    SUB = 40
    OPERATOR_COMPARE = 41
    OPERATOR_LOGIC = 42
    EXPR_COMMENT = 43
    CLOSE_CURLY = 44
    EXPR_LINE_COMMENT = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "expr" ]

    literalNames = [ "<INVALID>",
            "'<function'", "'</function>'", "'<if'", "'</if>'", "'</elif>'", 
            "'<elif'", "'<else>'", "'</else>'", "'<var'", "'</var>'", "'<program>'", 
            "'</program>'", "'condition='", "'>'", "'{'", "':'", "'('", 
            "')'", "'='", "'*'", "'/'", "'+'", "'-'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "FUNCTION_TAG_OPEN", "FUNCTION_TAG_END", "IF_TAG", "IF_END", 
            "ELIF_END", "ELIF_TAG", "ELSE", "ELSE_END", "VAR_DECL_START", 
            "VAR_DECL_END", "VAR_DECL", "COMMENT", "LINE_COMMENT", "WS", 
            "OPEN_PROGRAM", "CLOSE_PROGRAM", "CLOSE_TAG", "OPEN_TAG", "TAG_REFERENCE", 
            "FUNCTION_NAME", "FUNCTION_RET_TYPE", "FUNCTION_PARAM", "CONDITION_EQ", 
            "END_TAG", "PROPERTY_NAME", "OPEN_CURLY", "EXPR_WS", "NAME", 
            "LITERAL_STRING", "COLON", "OPEN_PAREN", "CLOSE_PAREN", "LITERAL_BOOL", 
            "LITERAL_INT", "LITERAL_FLOAT", "EQUALS", "MUL", "DIV", "ADD", 
            "SUB", "OPERATOR_COMPARE", "OPERATOR_LOGIC", "EXPR_COMMENT", 
            "CLOSE_CURLY", "EXPR_LINE_COMMENT" ]

    ruleNames = [ "DIGIT", "FUNCTION_TAG_OPEN", "FUNCTION_TAG_END", "IF_TAG", 
                  "IF_END", "ELIF_END", "ELIF_TAG", "ELSE", "ELSE_END", 
                  "VAR_DECL_START", "VAR_DECL_END", "VAR_DECL", "COMMENT", 
                  "LINE_COMMENT", "ID", "WS", "OPEN_PROGRAM", "CLOSE_PROGRAM", 
                  "CLOSE_TAG", "OPEN_TAG", "TAG_REFERENCE", "FUNCTION_NAME", 
                  "FUNCTION_RET_TYPE", "FUNCTION_PARAM", "CONDITION_EQ", 
                  "END_TAG", "PROPERTY_NAME", "OPEN_CURLY", "EXPR_WS", "NAME", 
                  "LITERAL_STRING", "COLON", "OPEN_PAREN", "CLOSE_PAREN", 
                  "LITERAL_BOOL", "LITERAL_INT", "LITERAL_FLOAT", "EQUALS", 
                  "MUL", "DIV", "ADD", "SUB", "OPERATOR_COMPARE", "OPERATOR_LOGIC", 
                  "EXPR_COMMENT", "CLOSE_CURLY", "EXPR_LINE_COMMENT" ]

    grammarFileName = "ignoreLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


