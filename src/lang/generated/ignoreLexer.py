# Generated from src/grammar/ignoreLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,53,473,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
        7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
        2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,
        7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,
        2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,
        7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,
        2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,
        7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,
        2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,1,1,1,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,
        235,8,18,10,18,12,18,238,9,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,5,19,249,8,19,10,19,12,19,252,9,19,1,19,1,19,1,20,1,20,
        5,20,258,8,20,10,20,12,20,261,9,20,1,20,3,20,264,8,20,1,21,4,21,
        267,8,21,11,21,12,21,268,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,32,
        1,32,1,32,1,32,3,32,347,8,32,1,33,1,33,1,33,1,33,1,34,4,34,354,8,
        34,11,34,12,34,355,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,3,35,369,8,35,1,36,1,36,1,37,1,37,5,37,375,8,37,10,37,
        12,37,378,9,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,3,41,
        389,8,41,1,41,4,41,392,8,41,11,41,12,41,393,1,42,3,42,397,8,42,1,
        42,4,42,400,8,42,11,42,12,42,401,1,42,1,42,5,42,406,8,42,10,42,12,
        42,409,9,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,
        48,1,48,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,
        51,1,51,1,51,3,51,437,8,51,1,52,1,52,1,52,1,52,3,52,443,8,52,1,53,
        1,53,1,53,1,53,5,53,449,8,53,10,53,12,53,452,9,53,1,53,1,53,1,53,
        1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,5,55,467,8,55,
        10,55,12,55,470,9,55,1,55,1,55,3,236,376,450,0,56,2,0,4,0,6,1,8,
        2,10,3,12,4,14,5,16,6,18,7,20,8,22,9,24,10,26,11,28,12,30,13,32,
        14,34,15,36,16,38,17,40,18,42,0,44,19,46,20,48,21,50,22,52,23,54,
        24,56,25,58,26,60,27,62,28,64,29,66,30,68,31,70,32,72,33,74,34,76,
        35,78,36,80,37,82,38,84,39,86,40,88,41,90,42,92,43,94,44,96,45,98,
        46,100,47,102,48,104,49,106,50,108,51,110,52,112,53,2,0,1,7,1,0,
        48,57,2,0,10,10,13,13,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
        122,82,0,32,32,8986,8987,9193,9196,9200,9200,9203,9203,9725,9726,
        9748,9749,9800,9811,9855,9855,9875,9875,9889,9889,9898,9899,9917,
        9918,9924,9925,9934,9934,9940,9940,9962,9962,9970,9971,9973,9973,
        9978,9978,9981,9981,9989,9989,9994,9995,10024,10024,10060,10060,
        10062,10062,10067,10069,10071,10071,10133,10135,10160,10160,10175,
        10175,11035,11036,11088,11088,11093,11093,126980,126980,127183,127183,
        127374,127374,127377,127386,127462,127487,127489,127489,127514,127514,
        127535,127535,127538,127542,127544,127546,127568,127569,127744,127776,
        127789,127797,127799,127868,127870,127891,127904,127946,127951,127955,
        127968,127984,127988,127988,127992,128062,128064,128064,128066,128252,
        128255,128317,128331,128334,128336,128359,128378,128378,128405,128406,
        128420,128420,128507,128591,128640,128709,128716,128716,128720,128722,
        128725,128727,128732,128735,128747,128748,128756,128764,128992,129003,
        129008,129008,129292,129338,129340,129349,129351,129535,129648,129660,
        129664,129672,129680,129725,129727,129733,129742,129755,129760,129768,
        129776,129784,3,0,9,10,13,13,32,32,2,0,60,60,62,62,489,0,6,1,0,0,
        0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,
        0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,
        0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,
        0,0,38,1,0,0,0,0,40,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,
        0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,
        0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,
        0,1,70,1,0,0,0,1,72,1,0,0,0,1,74,1,0,0,0,1,76,1,0,0,0,1,78,1,0,0,
        0,1,80,1,0,0,0,1,82,1,0,0,0,1,84,1,0,0,0,1,86,1,0,0,0,1,88,1,0,0,
        0,1,90,1,0,0,0,1,92,1,0,0,0,1,94,1,0,0,0,1,96,1,0,0,0,1,98,1,0,0,
        0,1,100,1,0,0,0,1,102,1,0,0,0,1,104,1,0,0,0,1,106,1,0,0,0,1,108,
        1,0,0,0,1,110,1,0,0,0,1,112,1,0,0,0,2,114,1,0,0,0,4,116,1,0,0,0,
        6,118,1,0,0,0,8,128,1,0,0,0,10,140,1,0,0,0,12,144,1,0,0,0,14,150,
        1,0,0,0,16,158,1,0,0,0,18,164,1,0,0,0,20,171,1,0,0,0,22,179,1,0,
        0,0,24,184,1,0,0,0,26,191,1,0,0,0,28,199,1,0,0,0,30,202,1,0,0,0,
        32,209,1,0,0,0,34,218,1,0,0,0,36,223,1,0,0,0,38,230,1,0,0,0,40,244,
        1,0,0,0,42,263,1,0,0,0,44,266,1,0,0,0,46,272,1,0,0,0,48,282,1,0,
        0,0,50,293,1,0,0,0,52,298,1,0,0,0,54,301,1,0,0,0,56,303,1,0,0,0,
        58,311,1,0,0,0,60,325,1,0,0,0,62,329,1,0,0,0,64,340,1,0,0,0,66,342,
        1,0,0,0,68,348,1,0,0,0,70,353,1,0,0,0,72,368,1,0,0,0,74,370,1,0,
        0,0,76,372,1,0,0,0,78,381,1,0,0,0,80,383,1,0,0,0,82,385,1,0,0,0,
        84,388,1,0,0,0,86,396,1,0,0,0,88,410,1,0,0,0,90,412,1,0,0,0,92,414,
        1,0,0,0,94,416,1,0,0,0,96,418,1,0,0,0,98,420,1,0,0,0,100,422,1,0,
        0,0,102,425,1,0,0,0,104,436,1,0,0,0,106,442,1,0,0,0,108,444,1,0,
        0,0,110,458,1,0,0,0,112,462,1,0,0,0,114,115,7,0,0,0,115,3,1,0,0,
        0,116,117,5,45,0,0,117,5,1,0,0,0,118,119,5,60,0,0,119,120,5,102,
        0,0,120,121,5,117,0,0,121,122,5,110,0,0,122,123,5,99,0,0,123,124,
        5,116,0,0,124,125,5,105,0,0,125,126,5,111,0,0,126,127,5,110,0,0,
        127,7,1,0,0,0,128,129,5,60,0,0,129,130,5,47,0,0,130,131,5,102,0,
        0,131,132,5,117,0,0,132,133,5,110,0,0,133,134,5,99,0,0,134,135,5,
        116,0,0,135,136,5,105,0,0,136,137,5,111,0,0,137,138,5,110,0,0,138,
        139,5,62,0,0,139,9,1,0,0,0,140,141,5,60,0,0,141,142,5,105,0,0,142,
        143,5,102,0,0,143,11,1,0,0,0,144,145,5,60,0,0,145,146,5,47,0,0,146,
        147,5,105,0,0,147,148,5,102,0,0,148,149,5,62,0,0,149,13,1,0,0,0,
        150,151,5,60,0,0,151,152,5,47,0,0,152,153,5,101,0,0,153,154,5,108,
        0,0,154,155,5,105,0,0,155,156,5,102,0,0,156,157,5,62,0,0,157,15,
        1,0,0,0,158,159,5,60,0,0,159,160,5,101,0,0,160,161,5,108,0,0,161,
        162,5,105,0,0,162,163,5,102,0,0,163,17,1,0,0,0,164,165,5,60,0,0,
        165,166,5,101,0,0,166,167,5,108,0,0,167,168,5,115,0,0,168,169,5,
        101,0,0,169,170,5,62,0,0,170,19,1,0,0,0,171,172,5,60,0,0,172,173,
        5,47,0,0,173,174,5,101,0,0,174,175,5,108,0,0,175,176,5,115,0,0,176,
        177,5,101,0,0,177,178,5,62,0,0,178,21,1,0,0,0,179,180,5,60,0,0,180,
        181,5,118,0,0,181,182,5,97,0,0,182,183,5,114,0,0,183,23,1,0,0,0,
        184,185,5,60,0,0,185,186,5,47,0,0,186,187,5,118,0,0,187,188,5,97,
        0,0,188,189,5,114,0,0,189,190,5,62,0,0,190,25,1,0,0,0,191,192,5,
        116,0,0,192,193,5,121,0,0,193,194,5,112,0,0,194,195,5,101,0,0,195,
        196,5,61,0,0,196,197,1,0,0,0,197,198,3,42,20,0,198,27,1,0,0,0,199,
        200,3,22,10,0,200,201,3,42,20,0,201,29,1,0,0,0,202,203,5,60,0,0,
        203,204,5,119,0,0,204,205,5,104,0,0,205,206,5,105,0,0,206,207,5,
        108,0,0,207,208,5,101,0,0,208,31,1,0,0,0,209,210,5,60,0,0,210,211,
        5,47,0,0,211,212,5,119,0,0,212,213,5,104,0,0,213,214,5,105,0,0,214,
        215,5,108,0,0,215,216,5,101,0,0,216,217,5,62,0,0,217,33,1,0,0,0,
        218,219,5,60,0,0,219,220,5,102,0,0,220,221,5,111,0,0,221,222,5,114,
        0,0,222,35,1,0,0,0,223,224,5,60,0,0,224,225,5,47,0,0,225,226,5,102,
        0,0,226,227,5,111,0,0,227,228,5,114,0,0,228,229,5,62,0,0,229,37,
        1,0,0,0,230,231,5,47,0,0,231,232,5,42,0,0,232,236,1,0,0,0,233,235,
        9,0,0,0,234,233,1,0,0,0,235,238,1,0,0,0,236,237,1,0,0,0,236,234,
        1,0,0,0,237,239,1,0,0,0,238,236,1,0,0,0,239,240,5,42,0,0,240,241,
        5,47,0,0,241,242,1,0,0,0,242,243,6,18,0,0,243,39,1,0,0,0,244,245,
        5,47,0,0,245,246,5,47,0,0,246,250,1,0,0,0,247,249,8,1,0,0,248,247,
        1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,253,
        1,0,0,0,252,250,1,0,0,0,253,254,6,19,0,0,254,41,1,0,0,0,255,259,
        7,2,0,0,256,258,7,3,0,0,257,256,1,0,0,0,258,261,1,0,0,0,259,257,
        1,0,0,0,259,260,1,0,0,0,260,264,1,0,0,0,261,259,1,0,0,0,262,264,
        7,4,0,0,263,255,1,0,0,0,263,262,1,0,0,0,264,43,1,0,0,0,265,267,7,
        5,0,0,266,265,1,0,0,0,267,268,1,0,0,0,268,266,1,0,0,0,268,269,1,
        0,0,0,269,270,1,0,0,0,270,271,6,21,0,0,271,45,1,0,0,0,272,273,5,
        60,0,0,273,274,5,112,0,0,274,275,5,114,0,0,275,276,5,111,0,0,276,
        277,5,103,0,0,277,278,5,114,0,0,278,279,5,97,0,0,279,280,5,109,0,
        0,280,281,5,62,0,0,281,47,1,0,0,0,282,283,5,60,0,0,283,284,5,47,
        0,0,284,285,5,112,0,0,285,286,5,114,0,0,286,287,5,111,0,0,287,288,
        5,103,0,0,288,289,5,114,0,0,289,290,5,97,0,0,290,291,5,109,0,0,291,
        292,5,62,0,0,292,49,1,0,0,0,293,294,5,60,0,0,294,295,5,47,0,0,295,
        296,1,0,0,0,296,297,3,42,20,0,297,51,1,0,0,0,298,299,5,60,0,0,299,
        300,3,42,20,0,300,53,1,0,0,0,301,302,3,42,20,0,302,55,1,0,0,0,303,
        304,5,110,0,0,304,305,5,97,0,0,305,306,5,109,0,0,306,307,5,101,0,
        0,307,308,5,61,0,0,308,309,1,0,0,0,309,310,3,42,20,0,310,57,1,0,
        0,0,311,312,5,114,0,0,312,313,5,101,0,0,313,314,5,116,0,0,314,315,
        5,117,0,0,315,316,5,114,0,0,316,317,5,110,0,0,317,318,5,84,0,0,318,
        319,5,121,0,0,319,320,5,112,0,0,320,321,5,101,0,0,321,322,5,61,0,
        0,322,323,1,0,0,0,323,324,3,42,20,0,324,59,1,0,0,0,325,326,3,42,
        20,0,326,327,5,58,0,0,327,328,3,42,20,0,328,61,1,0,0,0,329,330,5,
        99,0,0,330,331,5,111,0,0,331,332,5,110,0,0,332,333,5,100,0,0,333,
        334,5,105,0,0,334,335,5,116,0,0,335,336,5,105,0,0,336,337,5,111,
        0,0,337,338,5,110,0,0,338,339,5,61,0,0,339,63,1,0,0,0,340,341,5,
        62,0,0,341,65,1,0,0,0,342,346,3,42,20,0,343,347,5,61,0,0,344,345,
        5,32,0,0,345,347,5,61,0,0,346,343,1,0,0,0,346,344,1,0,0,0,347,67,
        1,0,0,0,348,349,5,123,0,0,349,350,1,0,0,0,350,351,6,33,1,0,351,69,
        1,0,0,0,352,354,7,5,0,0,353,352,1,0,0,0,354,355,1,0,0,0,355,353,
        1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,6,34,0,0,358,71,
        1,0,0,0,359,360,5,70,0,0,360,361,5,97,0,0,361,362,5,108,0,0,362,
        363,5,115,0,0,363,369,5,101,0,0,364,365,5,84,0,0,365,366,5,114,0,
        0,366,367,5,117,0,0,367,369,5,101,0,0,368,359,1,0,0,0,368,364,1,
        0,0,0,369,73,1,0,0,0,370,371,3,42,20,0,371,75,1,0,0,0,372,376,5,
        34,0,0,373,375,9,0,0,0,374,373,1,0,0,0,375,378,1,0,0,0,376,377,1,
        0,0,0,376,374,1,0,0,0,377,379,1,0,0,0,378,376,1,0,0,0,379,380,5,
        34,0,0,380,77,1,0,0,0,381,382,5,58,0,0,382,79,1,0,0,0,383,384,5,
        40,0,0,384,81,1,0,0,0,385,386,5,41,0,0,386,83,1,0,0,0,387,389,3,
        4,1,0,388,387,1,0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,390,392,3,
        2,0,0,391,390,1,0,0,0,392,393,1,0,0,0,393,391,1,0,0,0,393,394,1,
        0,0,0,394,85,1,0,0,0,395,397,3,4,1,0,396,395,1,0,0,0,396,397,1,0,
        0,0,397,399,1,0,0,0,398,400,3,2,0,0,399,398,1,0,0,0,400,401,1,0,
        0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,407,5,46,
        0,0,404,406,3,2,0,0,405,404,1,0,0,0,406,409,1,0,0,0,407,405,1,0,
        0,0,407,408,1,0,0,0,408,87,1,0,0,0,409,407,1,0,0,0,410,411,5,61,
        0,0,411,89,1,0,0,0,412,413,5,42,0,0,413,91,1,0,0,0,414,415,5,47,
        0,0,415,93,1,0,0,0,416,417,5,43,0,0,417,95,1,0,0,0,418,419,5,45,
        0,0,419,97,1,0,0,0,420,421,5,37,0,0,421,99,1,0,0,0,422,423,5,47,
        0,0,423,424,5,47,0,0,424,101,1,0,0,0,425,426,5,33,0,0,426,103,1,
        0,0,0,427,428,5,61,0,0,428,437,5,61,0,0,429,430,5,33,0,0,430,437,
        5,61,0,0,431,432,5,62,0,0,432,437,5,61,0,0,433,437,7,6,0,0,434,435,
        5,60,0,0,435,437,5,61,0,0,436,427,1,0,0,0,436,429,1,0,0,0,436,431,
        1,0,0,0,436,433,1,0,0,0,436,434,1,0,0,0,437,105,1,0,0,0,438,439,
        5,38,0,0,439,443,5,38,0,0,440,441,5,124,0,0,441,443,5,124,0,0,442,
        438,1,0,0,0,442,440,1,0,0,0,443,107,1,0,0,0,444,445,5,47,0,0,445,
        446,5,42,0,0,446,450,1,0,0,0,447,449,9,0,0,0,448,447,1,0,0,0,449,
        452,1,0,0,0,450,451,1,0,0,0,450,448,1,0,0,0,451,453,1,0,0,0,452,
        450,1,0,0,0,453,454,5,42,0,0,454,455,5,47,0,0,455,456,1,0,0,0,456,
        457,6,53,0,0,457,109,1,0,0,0,458,459,5,125,0,0,459,460,1,0,0,0,460,
        461,6,54,2,0,461,111,1,0,0,0,462,463,5,47,0,0,463,464,5,47,0,0,464,
        468,1,0,0,0,465,467,8,1,0,0,466,465,1,0,0,0,467,470,1,0,0,0,468,
        466,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,468,1,0,0,0,471,
        472,6,55,0,0,472,113,1,0,0,0,20,0,1,236,250,259,263,268,346,355,
        368,376,388,393,396,401,407,436,442,450,468,3,6,0,0,5,1,0,5,0,0
    ]

class ignoreLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    expr = 1

    FUNCTION_TAG_OPEN = 1
    FUNCTION_TAG_END = 2
    IF_TAG = 3
    IF_END = 4
    ELIF_END = 5
    ELIF_TAG = 6
    ELSE = 7
    ELSE_END = 8
    VAR_DECL_START = 9
    VAR_DECL_END = 10
    VAR_DECL_TYPE = 11
    VAR_DECL = 12
    WHILE_TAG = 13
    WHILE_END = 14
    FOR_TAG = 15
    FOR_END = 16
    COMMENT = 17
    LINE_COMMENT = 18
    WS = 19
    OPEN_PROGRAM = 20
    CLOSE_PROGRAM = 21
    CLOSE_TAG = 22
    OPEN_TAG = 23
    TAG_REFERENCE = 24
    FUNCTION_NAME = 25
    FUNCTION_RET_TYPE = 26
    FUNCTION_PARAM = 27
    CONDITION_EQ = 28
    END_TAG = 29
    PROPERTY_NAME = 30
    OPEN_CURLY = 31
    EXPR_WS = 32
    LITERAL_BOOL = 33
    NAME = 34
    LITERAL_STRING = 35
    COLON = 36
    OPEN_PAREN = 37
    CLOSE_PAREN = 38
    LITERAL_INT = 39
    LITERAL_FLOAT = 40
    EQUALS = 41
    MUL = 42
    DIV = 43
    ADD = 44
    SUB = 45
    MOD = 46
    INT_DIV = 47
    NOT = 48
    OPERATOR_COMPARE = 49
    OPERATOR_LOGIC = 50
    EXPR_COMMENT = 51
    CLOSE_CURLY = 52
    EXPR_LINE_COMMENT = 53

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "expr" ]

    literalNames = [ "<INVALID>",
            "'<function'", "'</function>'", "'<if'", "'</if>'", "'</elif>'", 
            "'<elif'", "'<else>'", "'</else>'", "'<var'", "'</var>'", "'<while'", 
            "'</while>'", "'<for'", "'</for>'", "'<program>'", "'</program>'", 
            "'condition='", "'>'", "'{'", "':'", "'('", "')'", "'='", "'*'", 
            "'/'", "'+'", "'-'", "'%'", "'//'", "'!'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "FUNCTION_TAG_OPEN", "FUNCTION_TAG_END", "IF_TAG", "IF_END", 
            "ELIF_END", "ELIF_TAG", "ELSE", "ELSE_END", "VAR_DECL_START", 
            "VAR_DECL_END", "VAR_DECL_TYPE", "VAR_DECL", "WHILE_TAG", "WHILE_END", 
            "FOR_TAG", "FOR_END", "COMMENT", "LINE_COMMENT", "WS", "OPEN_PROGRAM", 
            "CLOSE_PROGRAM", "CLOSE_TAG", "OPEN_TAG", "TAG_REFERENCE", "FUNCTION_NAME", 
            "FUNCTION_RET_TYPE", "FUNCTION_PARAM", "CONDITION_EQ", "END_TAG", 
            "PROPERTY_NAME", "OPEN_CURLY", "EXPR_WS", "LITERAL_BOOL", "NAME", 
            "LITERAL_STRING", "COLON", "OPEN_PAREN", "CLOSE_PAREN", "LITERAL_INT", 
            "LITERAL_FLOAT", "EQUALS", "MUL", "DIV", "ADD", "SUB", "MOD", 
            "INT_DIV", "NOT", "OPERATOR_COMPARE", "OPERATOR_LOGIC", "EXPR_COMMENT", 
            "CLOSE_CURLY", "EXPR_LINE_COMMENT" ]

    ruleNames = [ "DIGIT", "NEGATIVE_SIGN", "FUNCTION_TAG_OPEN", "FUNCTION_TAG_END", 
                  "IF_TAG", "IF_END", "ELIF_END", "ELIF_TAG", "ELSE", "ELSE_END", 
                  "VAR_DECL_START", "VAR_DECL_END", "VAR_DECL_TYPE", "VAR_DECL", 
                  "WHILE_TAG", "WHILE_END", "FOR_TAG", "FOR_END", "COMMENT", 
                  "LINE_COMMENT", "ID", "WS", "OPEN_PROGRAM", "CLOSE_PROGRAM", 
                  "CLOSE_TAG", "OPEN_TAG", "TAG_REFERENCE", "FUNCTION_NAME", 
                  "FUNCTION_RET_TYPE", "FUNCTION_PARAM", "CONDITION_EQ", 
                  "END_TAG", "PROPERTY_NAME", "OPEN_CURLY", "EXPR_WS", "LITERAL_BOOL", 
                  "NAME", "LITERAL_STRING", "COLON", "OPEN_PAREN", "CLOSE_PAREN", 
                  "LITERAL_INT", "LITERAL_FLOAT", "EQUALS", "MUL", "DIV", 
                  "ADD", "SUB", "MOD", "INT_DIV", "NOT", "OPERATOR_COMPARE", 
                  "OPERATOR_LOGIC", "EXPR_COMMENT", "CLOSE_CURLY", "EXPR_LINE_COMMENT" ]

    grammarFileName = "ignoreLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


