# Generated from src/grammar/ignoreLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,434,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
        7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
        2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,
        7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,
        2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,
        7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,
        2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,
        7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,
        1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,5,14,199,8,14,10,14,12,14,202,9,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,5,15,213,8,15,10,15,12,15,216,9,15,1,15,
        1,15,1,16,1,16,5,16,222,8,16,10,16,12,16,225,9,16,1,16,3,16,228,
        8,16,1,17,4,17,231,8,17,11,17,12,17,232,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,4,30,315,8,30,
        11,30,12,30,316,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,3,31,330,8,31,1,32,1,32,1,33,1,33,5,33,336,8,33,10,33,12,33,
        339,9,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,3,37,350,8,
        37,1,37,4,37,353,8,37,11,37,12,37,354,1,38,3,38,358,8,38,1,38,4,
        38,361,8,38,11,38,12,38,362,1,38,1,38,5,38,367,8,38,10,38,12,38,
        370,9,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,
        1,44,1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,3,47,398,8,47,1,48,1,48,1,48,1,48,3,48,404,8,48,1,49,1,
        49,1,49,1,49,5,49,410,8,49,10,49,12,49,413,9,49,1,49,1,49,1,49,1,
        49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,428,8,51,10,
        51,12,51,431,9,51,1,51,1,51,3,200,337,411,0,52,2,0,4,0,6,1,8,2,10,
        3,12,4,14,5,16,6,18,7,20,8,22,9,24,10,26,11,28,12,30,13,32,14,34,
        0,36,15,38,16,40,17,42,18,44,19,46,20,48,21,50,22,52,23,54,24,56,
        25,58,26,60,27,62,28,64,29,66,30,68,31,70,32,72,33,74,34,76,35,78,
        36,80,37,82,38,84,39,86,40,88,41,90,42,92,43,94,44,96,45,98,46,100,
        47,102,48,104,49,2,0,1,7,1,0,48,57,2,0,10,10,13,13,2,0,65,90,97,
        122,4,0,48,57,65,90,95,95,97,122,82,0,32,32,8986,8987,9193,9196,
        9200,9200,9203,9203,9725,9726,9748,9749,9800,9811,9855,9855,9875,
        9875,9889,9889,9898,9899,9917,9918,9924,9925,9934,9934,9940,9940,
        9962,9962,9970,9971,9973,9973,9978,9978,9981,9981,9989,9989,9994,
        9995,10024,10024,10060,10060,10062,10062,10067,10069,10071,10071,
        10133,10135,10160,10160,10175,10175,11035,11036,11088,11088,11093,
        11093,126980,126980,127183,127183,127374,127374,127377,127386,127462,
        127487,127489,127489,127514,127514,127535,127535,127538,127542,127544,
        127546,127568,127569,127744,127776,127789,127797,127799,127868,127870,
        127891,127904,127946,127951,127955,127968,127984,127988,127988,127992,
        128062,128064,128064,128066,128252,128255,128317,128331,128334,128336,
        128359,128378,128378,128405,128406,128420,128420,128507,128591,128640,
        128709,128716,128716,128720,128722,128725,128727,128732,128735,128747,
        128748,128756,128764,128992,129003,129008,129008,129292,129338,129340,
        129349,129351,129535,129648,129660,129664,129672,129680,129725,129727,
        129733,129742,129755,129760,129768,129776,129784,3,0,9,10,13,13,
        32,32,2,0,60,60,62,62,449,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,
        12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,
        22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,
        32,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,
        44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,
        54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,1,62,1,0,0,0,1,
        64,1,0,0,0,1,66,1,0,0,0,1,68,1,0,0,0,1,70,1,0,0,0,1,72,1,0,0,0,1,
        74,1,0,0,0,1,76,1,0,0,0,1,78,1,0,0,0,1,80,1,0,0,0,1,82,1,0,0,0,1,
        84,1,0,0,0,1,86,1,0,0,0,1,88,1,0,0,0,1,90,1,0,0,0,1,92,1,0,0,0,1,
        94,1,0,0,0,1,96,1,0,0,0,1,98,1,0,0,0,1,100,1,0,0,0,1,102,1,0,0,0,
        1,104,1,0,0,0,2,106,1,0,0,0,4,108,1,0,0,0,6,110,1,0,0,0,8,120,1,
        0,0,0,10,132,1,0,0,0,12,136,1,0,0,0,14,142,1,0,0,0,16,150,1,0,0,
        0,18,156,1,0,0,0,20,163,1,0,0,0,22,171,1,0,0,0,24,176,1,0,0,0,26,
        183,1,0,0,0,28,191,1,0,0,0,30,194,1,0,0,0,32,208,1,0,0,0,34,227,
        1,0,0,0,36,230,1,0,0,0,38,236,1,0,0,0,40,246,1,0,0,0,42,257,1,0,
        0,0,44,262,1,0,0,0,46,265,1,0,0,0,48,267,1,0,0,0,50,275,1,0,0,0,
        52,289,1,0,0,0,54,293,1,0,0,0,56,304,1,0,0,0,58,306,1,0,0,0,60,309,
        1,0,0,0,62,314,1,0,0,0,64,329,1,0,0,0,66,331,1,0,0,0,68,333,1,0,
        0,0,70,342,1,0,0,0,72,344,1,0,0,0,74,346,1,0,0,0,76,349,1,0,0,0,
        78,357,1,0,0,0,80,371,1,0,0,0,82,373,1,0,0,0,84,375,1,0,0,0,86,377,
        1,0,0,0,88,379,1,0,0,0,90,381,1,0,0,0,92,383,1,0,0,0,94,386,1,0,
        0,0,96,397,1,0,0,0,98,403,1,0,0,0,100,405,1,0,0,0,102,419,1,0,0,
        0,104,423,1,0,0,0,106,107,7,0,0,0,107,3,1,0,0,0,108,109,5,45,0,0,
        109,5,1,0,0,0,110,111,5,60,0,0,111,112,5,102,0,0,112,113,5,117,0,
        0,113,114,5,110,0,0,114,115,5,99,0,0,115,116,5,116,0,0,116,117,5,
        105,0,0,117,118,5,111,0,0,118,119,5,110,0,0,119,7,1,0,0,0,120,121,
        5,60,0,0,121,122,5,47,0,0,122,123,5,102,0,0,123,124,5,117,0,0,124,
        125,5,110,0,0,125,126,5,99,0,0,126,127,5,116,0,0,127,128,5,105,0,
        0,128,129,5,111,0,0,129,130,5,110,0,0,130,131,5,62,0,0,131,9,1,0,
        0,0,132,133,5,60,0,0,133,134,5,105,0,0,134,135,5,102,0,0,135,11,
        1,0,0,0,136,137,5,60,0,0,137,138,5,47,0,0,138,139,5,105,0,0,139,
        140,5,102,0,0,140,141,5,62,0,0,141,13,1,0,0,0,142,143,5,60,0,0,143,
        144,5,47,0,0,144,145,5,101,0,0,145,146,5,108,0,0,146,147,5,105,0,
        0,147,148,5,102,0,0,148,149,5,62,0,0,149,15,1,0,0,0,150,151,5,60,
        0,0,151,152,5,101,0,0,152,153,5,108,0,0,153,154,5,105,0,0,154,155,
        5,102,0,0,155,17,1,0,0,0,156,157,5,60,0,0,157,158,5,101,0,0,158,
        159,5,108,0,0,159,160,5,115,0,0,160,161,5,101,0,0,161,162,5,62,0,
        0,162,19,1,0,0,0,163,164,5,60,0,0,164,165,5,47,0,0,165,166,5,101,
        0,0,166,167,5,108,0,0,167,168,5,115,0,0,168,169,5,101,0,0,169,170,
        5,62,0,0,170,21,1,0,0,0,171,172,5,60,0,0,172,173,5,118,0,0,173,174,
        5,97,0,0,174,175,5,114,0,0,175,23,1,0,0,0,176,177,5,60,0,0,177,178,
        5,47,0,0,178,179,5,118,0,0,179,180,5,97,0,0,180,181,5,114,0,0,181,
        182,5,62,0,0,182,25,1,0,0,0,183,184,5,116,0,0,184,185,5,121,0,0,
        185,186,5,112,0,0,186,187,5,101,0,0,187,188,5,61,0,0,188,189,1,0,
        0,0,189,190,3,34,16,0,190,27,1,0,0,0,191,192,3,22,10,0,192,193,3,
        34,16,0,193,29,1,0,0,0,194,195,5,47,0,0,195,196,5,42,0,0,196,200,
        1,0,0,0,197,199,9,0,0,0,198,197,1,0,0,0,199,202,1,0,0,0,200,201,
        1,0,0,0,200,198,1,0,0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,204,
        5,42,0,0,204,205,5,47,0,0,205,206,1,0,0,0,206,207,6,14,0,0,207,31,
        1,0,0,0,208,209,5,47,0,0,209,210,5,47,0,0,210,214,1,0,0,0,211,213,
        8,1,0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,
        1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,218,6,15,0,0,218,33,
        1,0,0,0,219,223,7,2,0,0,220,222,7,3,0,0,221,220,1,0,0,0,222,225,
        1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,228,1,0,0,0,225,223,
        1,0,0,0,226,228,7,4,0,0,227,219,1,0,0,0,227,226,1,0,0,0,228,35,1,
        0,0,0,229,231,7,5,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,1,
        0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,235,6,17,0,0,235,37,1,
        0,0,0,236,237,5,60,0,0,237,238,5,112,0,0,238,239,5,114,0,0,239,240,
        5,111,0,0,240,241,5,103,0,0,241,242,5,114,0,0,242,243,5,97,0,0,243,
        244,5,109,0,0,244,245,5,62,0,0,245,39,1,0,0,0,246,247,5,60,0,0,247,
        248,5,47,0,0,248,249,5,112,0,0,249,250,5,114,0,0,250,251,5,111,0,
        0,251,252,5,103,0,0,252,253,5,114,0,0,253,254,5,97,0,0,254,255,5,
        109,0,0,255,256,5,62,0,0,256,41,1,0,0,0,257,258,5,60,0,0,258,259,
        5,47,0,0,259,260,1,0,0,0,260,261,3,34,16,0,261,43,1,0,0,0,262,263,
        5,60,0,0,263,264,3,34,16,0,264,45,1,0,0,0,265,266,3,34,16,0,266,
        47,1,0,0,0,267,268,5,110,0,0,268,269,5,97,0,0,269,270,5,109,0,0,
        270,271,5,101,0,0,271,272,5,61,0,0,272,273,1,0,0,0,273,274,3,34,
        16,0,274,49,1,0,0,0,275,276,5,114,0,0,276,277,5,101,0,0,277,278,
        5,116,0,0,278,279,5,117,0,0,279,280,5,114,0,0,280,281,5,110,0,0,
        281,282,5,84,0,0,282,283,5,121,0,0,283,284,5,112,0,0,284,285,5,101,
        0,0,285,286,5,61,0,0,286,287,1,0,0,0,287,288,3,34,16,0,288,51,1,
        0,0,0,289,290,3,34,16,0,290,291,5,58,0,0,291,292,3,34,16,0,292,53,
        1,0,0,0,293,294,5,99,0,0,294,295,5,111,0,0,295,296,5,110,0,0,296,
        297,5,100,0,0,297,298,5,105,0,0,298,299,5,116,0,0,299,300,5,105,
        0,0,300,301,5,111,0,0,301,302,5,110,0,0,302,303,5,61,0,0,303,55,
        1,0,0,0,304,305,5,62,0,0,305,57,1,0,0,0,306,307,3,34,16,0,307,308,
        5,61,0,0,308,59,1,0,0,0,309,310,5,123,0,0,310,311,1,0,0,0,311,312,
        6,29,1,0,312,61,1,0,0,0,313,315,7,5,0,0,314,313,1,0,0,0,315,316,
        1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,319,
        6,30,0,0,319,63,1,0,0,0,320,321,5,70,0,0,321,322,5,97,0,0,322,323,
        5,108,0,0,323,324,5,115,0,0,324,330,5,101,0,0,325,326,5,84,0,0,326,
        327,5,114,0,0,327,328,5,117,0,0,328,330,5,101,0,0,329,320,1,0,0,
        0,329,325,1,0,0,0,330,65,1,0,0,0,331,332,3,34,16,0,332,67,1,0,0,
        0,333,337,5,34,0,0,334,336,9,0,0,0,335,334,1,0,0,0,336,339,1,0,0,
        0,337,338,1,0,0,0,337,335,1,0,0,0,338,340,1,0,0,0,339,337,1,0,0,
        0,340,341,5,34,0,0,341,69,1,0,0,0,342,343,5,58,0,0,343,71,1,0,0,
        0,344,345,5,40,0,0,345,73,1,0,0,0,346,347,5,41,0,0,347,75,1,0,0,
        0,348,350,3,4,1,0,349,348,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,
        0,351,353,3,2,0,0,352,351,1,0,0,0,353,354,1,0,0,0,354,352,1,0,0,
        0,354,355,1,0,0,0,355,77,1,0,0,0,356,358,3,4,1,0,357,356,1,0,0,0,
        357,358,1,0,0,0,358,360,1,0,0,0,359,361,3,2,0,0,360,359,1,0,0,0,
        361,362,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,
        364,368,5,46,0,0,365,367,3,2,0,0,366,365,1,0,0,0,367,370,1,0,0,0,
        368,366,1,0,0,0,368,369,1,0,0,0,369,79,1,0,0,0,370,368,1,0,0,0,371,
        372,5,61,0,0,372,81,1,0,0,0,373,374,5,42,0,0,374,83,1,0,0,0,375,
        376,5,47,0,0,376,85,1,0,0,0,377,378,5,43,0,0,378,87,1,0,0,0,379,
        380,5,45,0,0,380,89,1,0,0,0,381,382,5,37,0,0,382,91,1,0,0,0,383,
        384,5,47,0,0,384,385,5,47,0,0,385,93,1,0,0,0,386,387,5,33,0,0,387,
        95,1,0,0,0,388,389,5,61,0,0,389,398,5,61,0,0,390,391,5,33,0,0,391,
        398,5,61,0,0,392,393,5,62,0,0,393,398,5,61,0,0,394,398,7,6,0,0,395,
        396,5,60,0,0,396,398,5,61,0,0,397,388,1,0,0,0,397,390,1,0,0,0,397,
        392,1,0,0,0,397,394,1,0,0,0,397,395,1,0,0,0,398,97,1,0,0,0,399,400,
        5,38,0,0,400,404,5,38,0,0,401,402,5,124,0,0,402,404,5,124,0,0,403,
        399,1,0,0,0,403,401,1,0,0,0,404,99,1,0,0,0,405,406,5,47,0,0,406,
        407,5,42,0,0,407,411,1,0,0,0,408,410,9,0,0,0,409,408,1,0,0,0,410,
        413,1,0,0,0,411,412,1,0,0,0,411,409,1,0,0,0,412,414,1,0,0,0,413,
        411,1,0,0,0,414,415,5,42,0,0,415,416,5,47,0,0,416,417,1,0,0,0,417,
        418,6,49,0,0,418,101,1,0,0,0,419,420,5,125,0,0,420,421,1,0,0,0,421,
        422,6,50,2,0,422,103,1,0,0,0,423,424,5,47,0,0,424,425,5,47,0,0,425,
        429,1,0,0,0,426,428,8,1,0,0,427,426,1,0,0,0,428,431,1,0,0,0,429,
        427,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,429,1,0,0,0,432,
        433,6,51,0,0,433,105,1,0,0,0,19,0,1,200,214,223,227,232,316,329,
        337,349,354,357,362,368,397,403,411,429,3,6,0,0,5,1,0,5,0,0
    ]

class ignoreLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    expr = 1

    FUNCTION_TAG_OPEN = 1
    FUNCTION_TAG_END = 2
    IF_TAG = 3
    IF_END = 4
    ELIF_END = 5
    ELIF_TAG = 6
    ELSE = 7
    ELSE_END = 8
    VAR_DECL_START = 9
    VAR_DECL_END = 10
    VAR_DECL_TYPE = 11
    VAR_DECL = 12
    COMMENT = 13
    LINE_COMMENT = 14
    WS = 15
    OPEN_PROGRAM = 16
    CLOSE_PROGRAM = 17
    CLOSE_TAG = 18
    OPEN_TAG = 19
    TAG_REFERENCE = 20
    FUNCTION_NAME = 21
    FUNCTION_RET_TYPE = 22
    FUNCTION_PARAM = 23
    CONDITION_EQ = 24
    END_TAG = 25
    PROPERTY_NAME = 26
    OPEN_CURLY = 27
    EXPR_WS = 28
    LITERAL_BOOL = 29
    NAME = 30
    LITERAL_STRING = 31
    COLON = 32
    OPEN_PAREN = 33
    CLOSE_PAREN = 34
    LITERAL_INT = 35
    LITERAL_FLOAT = 36
    EQUALS = 37
    MUL = 38
    DIV = 39
    ADD = 40
    SUB = 41
    MOD = 42
    INT_DIV = 43
    NOT = 44
    OPERATOR_COMPARE = 45
    OPERATOR_LOGIC = 46
    EXPR_COMMENT = 47
    CLOSE_CURLY = 48
    EXPR_LINE_COMMENT = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "expr" ]

    literalNames = [ "<INVALID>",
            "'<function'", "'</function>'", "'<if'", "'</if>'", "'</elif>'", 
            "'<elif'", "'<else>'", "'</else>'", "'<var'", "'</var>'", "'<program>'", 
            "'</program>'", "'condition='", "'>'", "'{'", "':'", "'('", 
            "')'", "'='", "'*'", "'/'", "'+'", "'-'", "'%'", "'//'", "'!'", 
            "'}'" ]

    symbolicNames = [ "<INVALID>",
            "FUNCTION_TAG_OPEN", "FUNCTION_TAG_END", "IF_TAG", "IF_END", 
            "ELIF_END", "ELIF_TAG", "ELSE", "ELSE_END", "VAR_DECL_START", 
            "VAR_DECL_END", "VAR_DECL_TYPE", "VAR_DECL", "COMMENT", "LINE_COMMENT", 
            "WS", "OPEN_PROGRAM", "CLOSE_PROGRAM", "CLOSE_TAG", "OPEN_TAG", 
            "TAG_REFERENCE", "FUNCTION_NAME", "FUNCTION_RET_TYPE", "FUNCTION_PARAM", 
            "CONDITION_EQ", "END_TAG", "PROPERTY_NAME", "OPEN_CURLY", "EXPR_WS", 
            "LITERAL_BOOL", "NAME", "LITERAL_STRING", "COLON", "OPEN_PAREN", 
            "CLOSE_PAREN", "LITERAL_INT", "LITERAL_FLOAT", "EQUALS", "MUL", 
            "DIV", "ADD", "SUB", "MOD", "INT_DIV", "NOT", "OPERATOR_COMPARE", 
            "OPERATOR_LOGIC", "EXPR_COMMENT", "CLOSE_CURLY", "EXPR_LINE_COMMENT" ]

    ruleNames = [ "DIGIT", "NEGATIVE_SIGN", "FUNCTION_TAG_OPEN", "FUNCTION_TAG_END", 
                  "IF_TAG", "IF_END", "ELIF_END", "ELIF_TAG", "ELSE", "ELSE_END", 
                  "VAR_DECL_START", "VAR_DECL_END", "VAR_DECL_TYPE", "VAR_DECL", 
                  "COMMENT", "LINE_COMMENT", "ID", "WS", "OPEN_PROGRAM", 
                  "CLOSE_PROGRAM", "CLOSE_TAG", "OPEN_TAG", "TAG_REFERENCE", 
                  "FUNCTION_NAME", "FUNCTION_RET_TYPE", "FUNCTION_PARAM", 
                  "CONDITION_EQ", "END_TAG", "PROPERTY_NAME", "OPEN_CURLY", 
                  "EXPR_WS", "LITERAL_BOOL", "NAME", "LITERAL_STRING", "COLON", 
                  "OPEN_PAREN", "CLOSE_PAREN", "LITERAL_INT", "LITERAL_FLOAT", 
                  "EQUALS", "MUL", "DIV", "ADD", "SUB", "MOD", "INT_DIV", 
                  "NOT", "OPERATOR_COMPARE", "OPERATOR_LOGIC", "EXPR_COMMENT", 
                  "CLOSE_CURLY", "EXPR_LINE_COMMENT" ]

    grammarFileName = "ignoreLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


